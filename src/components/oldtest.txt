#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/epoll.h>
#include <assert.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <ctype.h>

#define RMAX 4096
#define HMAX 1024
#define BMAX 1024
#define STORED_MAX 1024

static char request[RMAX+1];
static int HSIZE = 0;
static char header[HMAX];
static int BSIZE = 0;
static char body[BMAX];

// for POST data
static char stored_data[STORED_MAX];
static int stored_size = 0;

#define MAX_EVENTS 1000
#define MAX_CLIENTS 10240

typedef struct {
    int fd;
    int filefd;
    off_t offset;
    off_t filesize;
    int header_sent;
    char header[HMAX];
    int hsize;
} client_state;


static void send_data(int clientfd, char buf[], int size)
{
    ssize_t amt, total = 0;
    do {
        amt = send(clientfd, buf + total, size - total, 0);
        if (amt <= 0) break;
        total += amt;
    } while (total < size);
}

static void send_response(int clientfd)
{
    send_data(clientfd, header, HSIZE);
    send_data(clientfd, body, BSIZE);
}

static void send_error(int clientfd, int error_code)
{
    memset(header, 0, HMAX);
    memset(body, 0, BMAX);
    BSIZE = 0;
    switch (error_code) {
        case 400:
            strcpy(header, "HTTP/1.1 400 Bad Request\r\n\r\n");
            HSIZE = strlen(header);
            break;
        case 404:
            strcpy(header, "HTTP/1.1 404 Not Found\r\n\r\n");
            HSIZE = strlen(header);
            break;
        case 413:
            strcpy(header, "HTTP/1.1 413 Request Entity Too Large\r\n\r\n");
            HSIZE = strlen(header);
            break;
        default:
            strcpy(header, "HTTP/1.1 500 Internal Server Error\r\n\r\n");
            HSIZE = strlen(header);
    }
    send_response(clientfd);
}

// lab7 openfd stuff
static int
Socket(int namespace, int style, int protocol)
{
    int sockfd = socket(namespace, style, protocol);
    if (sockfd < 0) {
        perror("socket");
        exit(1);
    }
    return sockfd;
}

static void
Bind(int sockfd, struct sockaddr * server, socklen_t length)
{
    if (bind(sockfd, server, length) < 0) {
        perror("bind");
        exit(1);
    }
}

static void
Listen(int sockfd, int qlen)
{
    if (listen(sockfd, qlen) < 0) {
        perror("listen");
        exit(1);
    }
}

int open_listenfd(int port)
{
    int listenfd = Socket(AF_INET, SOCK_STREAM, 0);
    static struct sockaddr_in server;

    server.sin_family = AF_INET;
    server.sin_port = htons(port);

    inet_pton(AF_INET, "127.0.0.1", &(server.sin_addr));
    int optval = 1;
    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));

    // use proper pointer type
    Bind(listenfd, (struct sockaddr*)&server, sizeof(server));

    Listen(listenfd, 10);
    return listenfd;
}

// Find double CRLF
char* find_end_of_headers(char* req) {
    char* ptr = req;
    while (*ptr) {  // check haven't reached the end of the string
        if (ptr[0] == '\r' && ptr[1] == '\n' && ptr[2] == '\r' && ptr[3] == '\n') {
            return ptr + 4; // start of body
        }
        ptr++;
    }
    return NULL;
}

char* get_header_value(const char* req, const char* header_name) {
    static char value[RMAX];
    char header[100];

    sprintf(header, "%s: ", header_name);
    char* start = strstr(req, header);

    if (!start) return NULL;

    start += strlen(header);
    char* end = strstr(start, "\r\n");

    if (!end) return NULL;

    int len = end - start;

    if (len >= RMAX) len = RMAX - 1;

    strncpy(value, start, len);
    value[len] = '\0';

    return value;
}

// handle HTTP requests
void handle_request(int clientfd) {
    memset(request, 0, RMAX+1);
    ssize_t n = recv(clientfd, request, RMAX, 0);
    if (n <= 0) {
        return;
    }

    // valid HTTP (has double CRLF)
    char* body_start = find_end_of_headers(request);
    if (body_start == NULL) {
        send_error(clientfd, 400);
        return;
    }

    char method[10], url[100], version[20];
    if (sscanf(request, "%9s %99s %19s", method, url, version) != 3) {
        send_error(clientfd, 400);
        return;
    }

    // Validate method/URL combinations
    if (strcmp(method, "POST") == 0 && strcmp(url, "/data") != 0) {
        send_error(clientfd, 400);
        return;
    }

    if (strcmp(method, "GET") == 0 && strcmp(url, "/hello") == 0) {
        sprintf(header, "HTTP/1.1 200 OK\r\nContent-Length: 9\r\n\r\n");
        HSIZE = strlen(header);
        strcpy(body, "greetings");
        BSIZE = 9;

        send_response(clientfd);
    }
    else if (strcmp(method, "GET") == 0 && strcmp(url, "/headers") == 0) {
        char* headers_end = strstr(request, "\r\n\r\n");
        if (!headers_end) {
            send_error(clientfd, 400);
            return;
        }
        char* headers_start = strstr(request, "\r\n");
        if (!headers_start) {
            send_error(clientfd, 400);
            return;
        }
        headers_start += 2; // Skip the \r\n

        int headers_len = headers_end - headers_start;

        if (headers_len > BMAX) {
            send_error(clientfd, 413);
            return;
        }

        memcpy(body, headers_start, headers_len);
        BSIZE = headers_len;
        sprintf(header, "HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\n", BSIZE);
        HSIZE = strlen(header);

        send_response(clientfd);
    }
    else if (strcmp(method, "GET") == 0 && strcmp(url, "/stored") == 0) {
        if (stored_size == 0) {
            strcpy(body, "(NULL)");
            BSIZE = 6;
        } else {
            memcpy(body, stored_data, stored_size);
            BSIZE = stored_size;
        }
        sprintf(header, "HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\n", BSIZE);
        HSIZE = strlen(header);

        send_response(clientfd);
    }
    else if (strcmp(method, "POST") == 0 && strcmp(url, "/data") == 0) {
        char* content_length_str = get_header_value(request, "Content-Length");
        if (!content_length_str) {
            send_error(clientfd, 400);
            return;
        }

        int content_length = atoi(content_length_str);

        if (content_length > STORED_MAX) {
            send_error(clientfd, 413);
            return;
        }

        int actual_body_len = n - (body_start - request);
        int bytes_to_store = content_length < actual_body_len ? content_length : actual_body_len;

        memcpy(stored_data, body_start, bytes_to_store);
        stored_size = bytes_to_store;

        memcpy(body, stored_data, stored_size);
        BSIZE = stored_size;

        sprintf(header, "HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\n", BSIZE);
        HSIZE = strlen(header);

        send_response(clientfd);
    }
    else if (strcmp(method, "GET") == 0) {
        char filepath[256];
        if (url[0] == '/') {
            strcpy(filepath, url + 1);
        } else {
            strcpy(filepath, url);
        }

        int filefd = open(filepath, O_RDONLY);
        if (filefd < 0) {
            send_error(clientfd, 404);
            return;
        }

        struct stat file_stat;
        if (fstat(filefd, &file_stat) < 0 || !S_ISREG(file_stat.st_mode)) {
            close(filefd);
            send_error(clientfd, 404);
            return;
        }

        off_t file_size = file_stat.st_size;

        sprintf(header, "HTTP/1.1 200 OK\r\nContent-Length: %ld\r\n\r\n", file_size);
        HSIZE = strlen(header);
        send_data(clientfd, header, HSIZE);

        char buffer[1024];
        ssize_t nread;
        while ((nread = read(filefd, buffer, sizeof(buffer))) > 0) {
            send_data(clientfd, buffer, nread);
        }

        close(filefd);
        return;
    }
    else {
        send_error(clientfd, 400);
    }
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "usage: %s <port>\n", argv[0]);
        exit(1);
    }

    int port = atoi(argv[1]);
    int listenfd = open_listenfd(port);
    int epfd = epoll_create1(0);
    assert(epfd >= 0);

    struct epoll_event ev, events[MAX_EVENTS];
    ev.events = EPOLLIN;
    ev.data.fd = listenfd;
    epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &ev);

    client_state* clients[MAX_CLIENTS] = {0}; // fd => client_state

    while (1) {
        int n = epoll_wait(epfd, events, MAX_EVENTS, -1);
        for (int i = 0; i < n; i++) {
            int fd = events[i].data.fd;

            if (fd == listenfd) {
                struct sockaddr_in clientaddr;
                socklen_t clientlen = sizeof(clientaddr);
                int clientfd = accept(listenfd, (struct sockaddr *) &clientaddr, &clientlen);
                if (clientfd < 0) continue;

                // For tests 1-8 we can handle requests directly
                handle_request(clientfd);
                close(clientfd);
            }
        }
    }

    close(listenfd);
    return 0;
}